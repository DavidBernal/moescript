def enum = enumeration;
-- function takeWhile: Wraps an enumerable object, emits terms until it satisifies the condition
-- takeWhile(I <- Enumerable, condition(x) <- Boolean) <- Enumerable
def takeWhile = exports.takeWhile = Enumerable function(I, condition):
	for(var *a in I)
		if(not condition.apply null, a)
			return undefined;
		() <- a

-- function select: Wraps an enumerable object, only emits terms satisifying the condition
-- select(I <- Enumerable, condition(x) <- Boolean) <- Enumerable
def select = exports.select = Enumerable function(I, condition):
	for(var *a in I)
		if(condition.apply null, a)
			() <- a